# -*- coding: utf-8 -*-
"""House Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nVqOMfOgsP1EnxW5Wd5FRnGWAbcCJ7r-
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from sklearn import metrics
from xgboost import XGBRegressor

"""1) importing the Boston  House price Dataset â–¶"""

Boston_House_Dataset = sklearn.datasets.load_boston()
print(Boston_House_Dataset)

#Leoding  Data to a DataFrame
House_price_DataFrame = pd.DataFrame(Boston_House_Dataset.data, columns =Boston_House_Dataset.feature_names)

# print  5 rows of our Data
House_price_DataFrame.head()

#Add the target(price) column to our DataFrame
House_price_DataFrame['price']= Boston_House_Dataset.target

House_price_DataFrame.head()

# checking the number of columns and rows in the DataFrame 

House_price_DataFrame.shape

# check for missing values
House_price_DataFrame.isnull().sum()

#Statistical measures of the dataset
House_price_DataFrame.describe()

"""Anderstanding the corre
lation between various features in the DataSet
"""

correlation = House_price_DataFrame.corr()

"""Constructing a heatmap to understand the correlation"""

plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, cmap='Blues' )

#Splitting  the Data and Target
X= House_price_DataFrame.drop(['price'] , axis=1)
Y= House_price_DataFrame['price']
print(X)
print(Y)

#Spilling the Data into Train Data and Test Data(0.2 represent the proportion of the dataset to include in the test split.)
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=2)
print(X.shape, X_test.shape ,X_train.shape)

"""Model Training
XGBoost Regressor
"""

#Loading  the Model
model = XGBRegressor()
#Training the Model with X_train

model.fit(X_train , Y_train )

"""Evaluation



Prediction on training Data

"""

#accuracy for prediction on training Data
training_Data_prediction=model.predict(X_train)
print(training_Data_prediction)

#R squared  error
score_1=metrics.r2_score(Y_train,training_Data_prediction)
score_2=metrics.mean_absolute_error(Y_train,training_Data_prediction)
print("R square error :" ,score_1)
print("mean absolute error :" ,score_2)

"""Visulazing the acual Prices and the predicted prices

"""

plt.scatter(Y_train,training_Data_prediction)
plt.xlabel("Actual prices")
plt.ylabel("predicted prices")
plt.title("Actual vs predited prices")
plt.show()